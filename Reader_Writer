#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>

#define NUM_READERS 5
#define NUM_WRITERS 3

sem_t mutex;
sem_t rw_mutex;
int readers_count = 0;

void *reader(void *arg) {
    sem_wait(&mutex);
    readers_count++;
    if (readers_count == 1) {
        sem_wait(&rw_mutex);
    }
    sem_post(&mutex);

    int reader_id = (int)arg;
    printf("Reader %d is reading.\n", reader_id);
    sleep(1);
    printf("Reader %d is done reading.\n", reader_id);

    sem_wait(&mutex);
    readers_count--;
    if (readers_count == 0) {
        sem_post(&rw_mutex);
    }
    sem_post(&mutex);

    return NULL;
}

void *writer(void *arg) {
    sem_wait(&rw_mutex);

    int writer_id = (int)arg;
    printf("Writer %d is writing.\n", writer_id);
    sleep(1);
    printf("Writer %d is done writing.\n", writer_id);

    sem_post(&rw_mutex);

    return NULL;
}

int main() {
    pthread_t reader_threads[NUM_READERS];
    pthread_t writer_threads[NUM_WRITERS];

    sem_init(&mutex, 0, 1);
    sem_init(&rw_mutex, 0, 1);
while(1){
    for (int i = 0; i < NUM_READERS; i++) {
        pthread_create(&reader_threads[i], NULL, reader, (void*)i);
    }

    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_create(&writer_threads[i], NULL, writer, (void*)i);
    }

    for (int i = 0; i < NUM_READERS; i++) {
        pthread_join(reader_threads[i], NULL);
    }

    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writer_threads[i], NULL);
    }
}
    sem_destroy(&mutex);
    sem_destroy(&rw_mutex);

    return 0;
}
